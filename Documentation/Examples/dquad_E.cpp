//
// Created by David Seery on 01/05/2016.
// --@@
// Copyright (c) 2016 University of Sussex. All rights reserved.
//
// This file is part of the CppTransport platform.
//
// CppTransport is free software: you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation, either version 2 of the License, or
// (at your option) any later version.
//
// CppTransport is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with CppTransport.  If not, see <http://www.gnu.org/licenses/>.
//
// @license: GPL-2
// @contributor: David Seery <D.Seery@sussex.ac.uk>
// --@@
//

// include implementation header generated by translator
#include "dquad_mpi.h"

int main(int argc, char* argv[]);

void write_tasks(transport::repository<>& repo, transport::dquad_mpi<>* model);

void write_zeta_products(transport::repository<>& repo, transport::initial_conditions<>& ics,
                         transport::range<>& ts, transport::range<>& ks);

void write_fNL_products(transport::repository<>& repo, transport::initial_conditions<>& ics,
                        transport::range<>& ts, transport::range<>& ks);


void write_tasks(transport::repository<>& repo, transport::dquad_mpi<>* model)
  {
    const double Mp = 1.0;
    const double Mphi = 9E-5 * Mp;
    const double Mchi = 1E-5 * Mp;

    transport::parameters<> params(Mp, { Mphi, Mchi }, model);

    const double phi_init = 10.0 * Mp;
    const double chi_init = 12.9 * Mp;

    const double N_init = 0.0;
    const double N_pre = 12.0;
    const double N_end = 60.0;

    transport::initial_conditions<> ics("dquad", params, { phi_init, chi_init }, N_init, N_pre);

    transport::basic_range<> ts(N_init, N_end, 300, transport::spacing::linear);

    const double kt_lo = std::exp(3.0);
    const double kt_hi = std::exp(8.0);

    transport::basic_range<> ks_logspaced(kt_lo, kt_hi, 50, transport::spacing::log_bottom);
    transport::basic_range<> ks_linearspaced(kt_lo, kt_hi, 50, transport::spacing::linear);

    write_zeta_products(repo, ics, ts, ks_logspaced);
    write_fNL_products(repo, ics, ts, ks_linearspaced);
  }


void write_zeta_products(transport::repository<>& repo, transport::initial_conditions<>& ics,
                         transport::range<>& ts, transport::range<>& ks)
  {
    constexpr unsigned int num_fields = 2;

    transport::threepf_cubic_task<> tk3("dquad.threepf", ics, ts, ks);
    tk3.set_adaptive_ics_efolds(5.0);
    tk3.set_description("Compute time history of the 3-point function on a cubic lattice from k ~ e^3 to k ~ e^9");

    transport::zeta_threepf_task<> ztk3("dquad.threepf-zeta", tk3);
    ztk3.set_description("Convert the output from dquad.threepf into zeta 2- and 3-point functions");

    // time query -- all sample points
    vis_toolkit::SQL_time_query all_times("1=1");

    // time query -- last time
    vis_toolkit::SQL_time_query last_time("serial IN (SELECT MAX(serial) FROM time_samples)");

    // twopf query -- all configuraitons
    vis_toolkit::SQL_twopf_query all_twopfs("1=1");

    // threepf query -- all equilateral configurations
    vis_toolkit::SQL_threepf_query all_equilateral("ABS(alpha) < 1E-5 AND ABS(beta-1.0/3.0) < 1E-5");

    // threepf query -- isosceles triangles
    vis_toolkit::SQL_threepf_query all_isosceles("ABS(alpha) < 1E-5");

    // threepf query -- largest and smallest equilateral triangles
    vis_toolkit::SQL_threepf_query large_small_equilateral("ABS(alpha) < 1E-5 AND ABS(beta-1.0/3.0) < 1E-5 AND wavenumber1 IN (SELECT MAX(serial) FROM twopf_samples UNION SELECT MIN(serial) FROM twopf_samples)");

    // 1. Background fields and their momenta

    vis_toolkit::background_time_series<> bg_fields(tk3, vis_toolkit::index_selector<1>(num_fields).all(), all_times);
    vis_toolkit::background_line<> bg_eps(tk3, all_times, vis_toolkit::background_quantity::epsilon);
    vis_toolkit::background_line<> bg_eta(tk3, all_times, vis_toolkit::background_quantity::eta);
    vis_toolkit::background_line<> bg_masses(tk3, all_times, vis_toolkit::background_quantity::mass_spectrum);
    vis_toolkit::background_line<> bg_norm_masses(tk3, all_times, vis_toolkit::background_quantity::norm_mass_spectrum);
    vis_toolkit::background_line<> Hub(tk3, all_times, vis_toolkit::background_quantity::Hubble);

    vis_toolkit::time_series_plot<> bg_plot("dquad.product.bg-plot", "background.pdf");
    bg_plot.set_legend_position(vis_toolkit::legend_pos::bottom_left);
    bg_plot.set_y_label(true);
    bg_plot += bg_fields;

    vis_toolkit::time_series_plot<> bg_mass_plot("dquad.product.bg-masses", "masses.pdf");
    bg_mass_plot.set_y_label(true);
    bg_mass_plot.set_log_y(false).set_abs_y(false);
    bg_mass_plot += bg_masses + Hub;

    vis_toolkit::time_series_plot<> bg_norm_mass_plot("dquad.product.bg-norm-masses", "norm-masses.pdf");
    bg_norm_mass_plot.set_y_label(true);
    bg_norm_mass_plot.set_log_y(true).set_abs_y(true);
    bg_norm_mass_plot += bg_norm_masses + Hub;

    vis_toolkit::time_series_plot<> sr_plot("dquad.product.sr-plot", "sr.pdf");
    sr_plot.set_y_label(true);
    sr_plot += bg_eps + bg_eta;

    // 2. Zeta power spectrum

    vis_toolkit::zeta_twopf_wavenumber_series<> zeta_twopf(ztk3, last_time, all_twopfs);
    zeta_twopf.set_dimensionless(true);

    vis_toolkit::wavenumber_series_plot<> zeta_twopf_plot("dquad.product.zeta-twopf.plot", "twopf-plot.pdf");
    zeta_twopf_plot.set_log_x(true);
    zeta_twopf_plot += zeta_twopf;

    // 3. Zeta power spectrum spectral index

    vis_toolkit::zeta_twopf_wavenumber_series<> zeta_twopf_index(ztk3, last_time, all_twopfs);
    zeta_twopf_index.set_dimensionless(true);
    zeta_twopf_index.set_spectral_index(true);

    vis_toolkit::zeta_ns_wavenumber_series<> zeta_ns(ztk3, last_time, all_twopfs);

    vis_toolkit::wavenumber_series_plot<> zeta_twopf_index_plot("dquad.product.zeta-twopf.index-plot", "twopf-index-plot.pdf");
    zeta_twopf_index_plot.set_log_x(true);
    zeta_twopf_index_plot += zeta_twopf_index + zeta_ns;

    // 4. Reduced bispectrum on equilateral configurations

    vis_toolkit::zeta_reduced_bispectrum_wavenumber_series<> zeta_redbsp_equi(ztk3, last_time, all_equilateral);
    zeta_redbsp_equi.set_current_x_axis_value(vis_toolkit::axis_value::k);

    vis_toolkit::wavenumber_series_plot<> zeta_redbsp_equi_plot("dquad.product.zeta-redbsp.equi-plot", "equi-plot.pdf");
    zeta_redbsp_equi_plot.set_log_x(true);
    zeta_redbsp_equi_plot += zeta_redbsp_equi;

    // 5. Spectral index of reduced bispectrum on equilateral configurations

    vis_toolkit::zeta_reduced_bispectrum_wavenumber_series<> zeta_redbsp_equi_index(ztk3, last_time, all_equilateral);
    zeta_redbsp_equi_index.set_spectral_index(true).set_current_x_axis_value(vis_toolkit::axis_value::k);

    vis_toolkit::wavenumber_series_plot<> zeta_redbsp_equi_index_plot("dquad.product.zeta-redbsp.equi-index-plot", "equi-index.pdf");
    zeta_redbsp_equi_index_plot.set_log_x(true);
    zeta_redbsp_equi_index_plot += zeta_redbsp_equi_index;

    // 6. Reduced bispectrum as a function of squeezing on isosceles triangles

    vis_toolkit::zeta_reduced_bispectrum_wavenumber_series<> zeta_redbsp_squeeze(ztk3, last_time, all_isosceles);
    zeta_redbsp_squeeze.set_current_x_axis_value(vis_toolkit::axis_value::squeeze_k3);

    vis_toolkit::wavenumber_series_plot<> zeta_redbsp_squeeze_plot("dquad.product.zeta_redbsp.squeeze-plot", "squeeze-plot.pdf");
    zeta_redbsp_squeeze_plot.set_log_x(true);
    zeta_redbsp_squeeze_plot += zeta_redbsp_squeeze;

    // 7. Time evolution of some sample 3-point correlation functions

    vis_toolkit::threepf_time_series<> threepf_time(tk3, vis_toolkit::index_selector<3>(num_fields).none().set_on({ 0, 0, 0 }).set_on({ 1, 1, 1 }),
                                                    all_times, large_small_equilateral);

    vis_toolkit::time_series_plot<> threepf_time_plot("dquad.product.threepf-time", "threepf-time.pdf");
    threepf_time_plot += threepf_time;

    // 8. Tensor spectral index

    vis_toolkit::tensor_nt_wavenumber_series<> nt{tk3, vis_toolkit::index_selector<2>(2).none().set_on({0,0}),
                                                  last_time, all_twopfs};
    nt.set_current_x_axis_value(vis_toolkit::axis_value::k);

    vis_toolkit::wavenumber_series_plot<> nt_plot{"dquad.product.tensor.indexx-plot", "tensor-index-plot.pdf"};
    nt_plot.set_log_x(true);
    nt_plot += nt;

    // Output task

    transport::output_task<> out_tk("dquad.output.zeta");
    out_tk += bg_plot + bg_mass_plot + bg_norm_mass_plot + sr_plot
              + zeta_twopf_plot + zeta_twopf_index_plot + zeta_redbsp_equi_plot
              + zeta_redbsp_equi_index_plot + zeta_redbsp_squeeze_plot
              + threepf_time_plot + nt_plot;

    repo.commit(out_tk);
  }


void write_fNL_products(transport::repository<>& repo, transport::initial_conditions<>& ics,
                        transport::range<>& ts, transport::range<>& ks)
  {
    transport::threepf_cubic_task<> tk("dquad.threepf-linear", ics, ts, ks);
    tk.set_adaptive_ics_efolds(5.0);
    tk.set_description("Compute time history of the 3-point function on a linear grid");

    transport::zeta_threepf_task<> ztk("dquad.threepf-linear-zeta", tk);
    ztk.set_description("Convert the output from dquad.threepf-linear into zeta 2 and 3-point functions");

    transport::fNL_task<> fNL_local("dquad.fNL-local", ztk, vis_toolkit::bispectrum_template::local);
    fNL_local.set_description("Compute inner product of double-quadratic bispectrum with local template");

    transport::fNL_task<> fNL_equi("dquad.fNL-equi", ztk, vis_toolkit::bispectrum_template::equilateral);
    fNL_equi.set_description("Compute inner product of double-quadratic bispectrum with equilateral template");

    transport::fNL_task<> fNL_ortho("dquad.fNL-ortho", ztk, vis_toolkit::bispectrum_template::orthogonal);
    fNL_ortho.set_description("Compute inner product of double-quadratic bispectrum with orthogonal template");

    vis_toolkit::SQL_time_query all_times("1=1");

    vis_toolkit::fNL_time_series<> local(fNL_local, all_times);
    vis_toolkit::fNL_time_series<> equi(fNL_equi, all_times);
    vis_toolkit::fNL_time_series<> ortho(fNL_ortho, all_times);

    vis_toolkit::time_series_plot<> fNL_plot("dquad.product.fNL_plot", "fNL_plot.pdf");
    fNL_plot.set_log_y(false).set_abs_y(false);
    fNL_plot += local + equi + ortho;

    transport::output_task<> out_tk("dquad.output.fNL");
    out_tk += fNL_plot;

    repo.commit(out_tk);
  }


int main(int argc, char* argv[])
  {
    // set up a task_manager instance to control this process
    transport::task_manager<> mgr(argc, argv);

    // set up an instance of the double quadratic model
    auto model = mgr.create_model< transport::dquad_mpi<> >();

    // register task writer
    mgr.add_generator([=](transport::repository<>& repo) -> void { write_tasks(repo, model.get()); });

    // hand off control to the task manager
    mgr.process();

    return(EXIT_SUCCESS);
  }
